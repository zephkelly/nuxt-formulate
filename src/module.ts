import {
    type Resolver,
    defineNuxtModule,
    addPlugin,
    addImports,
    createResolver,
    addServerImports,
    addTemplate,
    addServerTemplate,
    addServerPlugin
} from '@nuxt/kit'

import type { AdapterType } from './runtime/shared/types/schema/adapter'
import type { DefaultValueGenerationOptions } from './runtime/shared/types/defaults'
import type { Nuxt } from 'nuxt/schema'



export interface ModuleOptions {
    /**
     * Validation libraries to be used by the module
     */
    validators?: AdapterType[]

    defaultValueOptions?: DefaultValueGenerationOptions
}

export default defineNuxtModule<ModuleOptions>({
    meta: {
        name: 'nuxt-formulate',
        configKey: 'formulate',
    },
    defaults: {
        validators: [],
        defaultValueOptions: {
            method: 'sensible',
            arrays: 'empty',
        }
    },
    setup(_options, _nuxt) {
        const resolver = createResolver(import.meta.url)

        addTemplate({
            filename: 'formulate-options.mjs',
            getContents: () => `
export default ${JSON.stringify(_options)}
`,
})
        _nuxt.options.alias['#nuxt-formulate'] = resolver.resolve('runtime/index')


        setupClientValidationAdapters(_nuxt, resolver, _options)

        setupServerValidationAdapters(_nuxt, resolver, _options)


        // Client
        addPlugin(resolver.resolve('runtime/app/plugins/adapter-register'))

        addImports([
            {
                name: 'useAutoForm',
                from: resolver.resolve('runtime/app/composables/useAutoForm'),
            },
            {
                name: 'useValidator',
                from: resolver.resolve('runtime/app/composables/useValidator'),
            },
            {
                name: 'getValidator',
                from: resolver.resolve('runtime/shared/utils/validator/getValidator'),
            }
        ])


        // Server
        addServerImports([
            {
                name: 'getValidator',
                from: resolver.resolve('runtime/server/utils/getValidator'),
            },
        ])

        addServerPlugin(resolver.resolve('runtime/server/plugins/adapter-register.server'))
    },
})

function setupClientValidationAdapters(_nuxt: Nuxt, resolver: Resolver, _options: ModuleOptions): void {
    const requestedAdapters = _options.validators || []
    const validAdapters: AdapterType[] = ['zod']
    
    requestedAdapters.forEach((adapter) => {
        if (!validAdapters.includes(adapter as AdapterType)) {
            throw new Error(`Invalid adapter "${adapter}" provided. Valid adapters are: ${validAdapters.join(', ')}`)
        }
        else {
            _nuxt.hook('nitro:build:before', () => {
                console.log(
                    '%c FORMULATE ', 'color: black; background-color: #0f8dcc; font-weight: bold; font-size: 1.15rem;',
                    `âš¡ Registering ${adapter} adapter`
                );
            })
        }
    })

    addTemplate({
        filename: 'formulate-adapters.mjs',
        write: true,
        getContents: () => {
            const imports = requestedAdapters.map((adapter) => {
                const adapterPath = resolver.resolve(`runtime/shared/utils/core/adapters/${adapter}/index`)
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `import { register as register${safeAdapterName} } from '${adapterPath}'`
            }).join('\n')
            
            const registrations = requestedAdapters.map((adapter) => {
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `register${safeAdapterName}()`
            }).join('\n')
            
            return `
// Generated by nuxt-formulate module
${imports}

export function registerAdapters() {
    ${registrations}
}
            `
        }
    })
}

function setupServerValidationAdapters(_nuxt: Nuxt, resolver: Resolver, _options: ModuleOptions): void {
    const requestedAdapters = _options.validators || []
    const validAdapters: AdapterType[] = ['zod']

    requestedAdapters.forEach((adapter) => {
        if (!validAdapters.includes(adapter as AdapterType)) {
            throw new Error(`Invalid adapter "${adapter}" provided. Valid adapters are: ${validAdapters.join(', ')}`)
        }
    })

    addServerTemplate({
        filename: '#nuxt-formulate/formulate-adapters.mjs',
        getContents: () => {
            const imports = requestedAdapters.map((adapter) => {
                const adapterPath = resolver.resolve(`runtime/shared/utils/core/adapters/${adapter}/index`)
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `import { register as register${safeAdapterName} } from '${adapterPath}'`
            }).join('\n')
            
            const registrations = requestedAdapters.map((adapter) => {
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `register${safeAdapterName}()`
            }).join('\n')
            
            return `
// Generated by nuxt-formulate module
${imports}

export function registerAdapters() {
    ${registrations}
}
            `
        }
    })
}