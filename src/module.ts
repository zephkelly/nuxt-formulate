import { type Resolver, addTemplate } from '@nuxt/kit'

import {
    defineNuxtModule,
    addPlugin,
    addImportsDir,
    createResolver
} from '@nuxt/kit'

import type { AdapterType } from './runtime/shared/types/schema/adapter'



export interface ModuleOptions {
    /**
     * Validation libraries to be used by the module
     */
    validators?: AdapterType[]
}

export default defineNuxtModule<ModuleOptions>({
    meta: {
        name: 'nuxt-formulate',
        configKey: 'formulate',
    },
    defaults: {
        validators: []
    },
    setup(_options, _nuxt) {
        const resolver = createResolver(import.meta.url)

        addTemplate({
            filename: 'formulate-options.mjs',
            getContents: () => `
export default ${JSON.stringify(_options)}
            `,
        })

        setupValidationAdapters(resolver, _options)

        addImportsDir(resolver.resolve('runtime/app/composables'))
        addPlugin(resolver.resolve('runtime/plugin'))
    },
})

function setupValidationAdapters(resolver: Resolver, _options: ModuleOptions): void {
    const requestedAdapters = _options.validators || []
    const validAdapters: AdapterType[] = ['zod']
    
    requestedAdapters.forEach((adapter) => {
        if (!validAdapters.includes(adapter as AdapterType)) {
            throw new Error(`Invalid adapter "${adapter}" provided. Valid adapters are: ${validAdapters.join(', ')}`)
        }
    })

    addTemplate({
        filename: 'formulate-adapters.mjs',
        write: true,
        getContents: () => {
            const imports = requestedAdapters.map((adapter) => {
                const adapterPath = resolver.resolve(`runtime/shared/utils/validator/adapters/${adapter}/index`)
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `import { register as register${safeAdapterName} } from '${adapterPath}'`
            }).join('\n')
            
            const registrations = requestedAdapters.map((adapter) => {
                const safeAdapterName = adapter.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
                return `register${safeAdapterName}()`
            }).join('\n')
            
            return `
// Generated by nuxt-formulate module
${imports}

export function registerAdapters() {
    ${registrations}
}
            `
        }
    })
}